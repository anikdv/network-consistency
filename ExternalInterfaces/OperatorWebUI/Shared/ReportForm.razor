@using NetworkConsistency.Domain.Aggregates.FailureReport
@using NetworkConsistency.ExternalInterfaces.OperatorWebDto.Entities
@using NetworkConsistency.ExternalInterfaces.OperatorWebDto.ValueObjects
@using System.Text.Json
@using System.Text.Json.Serialization
@inject HttpClient _client
@inject IJSRuntime _jsRuntime
<h3>List of reports</h3>

@if (NotProcessedReports == null)
{
    <p>There are no reports</p>
}
else
{
    <ul>
        @foreach (var report in NotProcessedReports)
        {
            <li>
                @report.UID <span>@report.CreationDate</span>
            </li>
        }
    </ul>
}

<label>Say phrase: @SayPhrase</label>
<input type="text" @bind="SayPhrase"/>
<button class="btn btn-info" @onclick="SayHello">Test button</button>

@code {
    private FailureReport[] NotProcessedReports { get; set; }
    private string? SayPhrase { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            const string ENDPOINT = "api/failure-reports/not-processed";
            var jsonOptions = new JsonSerializerOptions
            {
                DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingDefault,
                PropertyNamingPolicy = JsonNamingPolicy.CamelCase
            };
            Console.WriteLine(await _client.GetStringAsync(ENDPOINT));
            var reportDto =
                await _client.GetFromJsonAsync<FailureReportDto[]>(ENDPOINT, jsonOptions)
                ?? Array.Empty<FailureReportDto>();
            Console.WriteLine(reportDto.FirstOrDefault()?.UID);
            NotProcessedReports = Array.ConvertAll(reportDto, OperatorWebFailureReport.Create);
        }
        catch (Exception ex)
        {
            await Console.Error.WriteLineAsync(ex.Message);
            await Console.Error.WriteLineAsync(ex.StackTrace);
        }
    }

    private async void SayHello()
    {
        Console.WriteLine(SayPhrase);
        await _jsRuntime.InvokeVoidAsync("alert", SayPhrase);
    }
}